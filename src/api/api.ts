/* tslint:disable */
/* eslint-disable */
/**
 * Treuhand CRM API
 * OAuth Login
 *
 * The version of the OpenAPI document: 1.0
 * Contact: develop@upcraft.li
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GormDeletedAt
 */
export interface GormDeletedAt {
    /**
     * 
     * @type {string}
     * @memberof GormDeletedAt
     */
    'time'?: string;
    /**
     * Valid is true if Time is not NULL
     * @type {boolean}
     * @memberof GormDeletedAt
     */
    'valid'?: boolean;
}
/**
 * 
 * @export
 * @interface ModelsCustomer
 */
export interface ModelsCustomer {
    /**
     * 
     * @type {boolean}
     * @memberof ModelsCustomer
     */
    'archived'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomer
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomer
     */
    'createdAt'?: string;
    /**
     * 
     * @type {ModelsUser}
     * @memberof ModelsCustomer
     */
    'createdBy'?: ModelsUser;
    /**
     * 
     * @type {number}
     * @memberof ModelsCustomer
     */
    'createdByUserID'?: number;
    /**
     * 
     * @type {GormDeletedAt}
     * @memberof ModelsCustomer
     */
    'deletedAt'?: GormDeletedAt;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomer
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomer
     */
    'firstname'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsCustomer
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomer
     */
    'lastname'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsCustomer
     */
    'postcode'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomer
     */
    'street'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomer
     */
    'streetNr'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomer
     */
    'telephon'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomer
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface ModelsCustomerRequest
 */
export interface ModelsCustomerRequest {
    /**
     * 
     * @type {boolean}
     * @memberof ModelsCustomerRequest
     */
    'archived'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomerRequest
     */
    'city'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsCustomerRequest
     */
    'createdByUserID'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomerRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomerRequest
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomerRequest
     */
    'lastname'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsCustomerRequest
     */
    'postcode'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomerRequest
     */
    'street'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomerRequest
     */
    'streetNr'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomerRequest
     */
    'telephon'?: string;
}
/**
 * 
 * @export
 * @interface ModelsCustomerResponse
 */
export interface ModelsCustomerResponse {
    /**
     * 
     * @type {boolean}
     * @memberof ModelsCustomerResponse
     */
    'archived'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomerResponse
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomerResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {ModelsUser}
     * @memberof ModelsCustomerResponse
     */
    'createdBy'?: ModelsUser;
    /**
     * 
     * @type {number}
     * @memberof ModelsCustomerResponse
     */
    'createdByUserID'?: number;
    /**
     * 
     * @type {GormDeletedAt}
     * @memberof ModelsCustomerResponse
     */
    'deletedAt'?: GormDeletedAt;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomerResponse
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomerResponse
     */
    'firstname'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsCustomerResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomerResponse
     */
    'lastname'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsCustomerResponse
     */
    'postcode'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomerResponse
     */
    'street'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomerResponse
     */
    'streetNr'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomerResponse
     */
    'telephon'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCustomerResponse
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface ModelsDeleteMessage
 */
export interface ModelsDeleteMessage {
    /**
     * 
     * @type {string}
     * @memberof ModelsDeleteMessage
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ModelsHttpError
 */
export interface ModelsHttpError {
    /**
     * 
     * @type {string}
     * @memberof ModelsHttpError
     */
    'error'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsHttpError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ModelsReport
 */
export interface ModelsReport {
    /**
     * 
     * @type {boolean}
     * @memberof ModelsReport
     */
    'archived'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ModelsReport
     */
    'archivedByCustomer'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsReport
     */
    'createdAt'?: string;
    /**
     * 
     * @type {ModelsUser}
     * @memberof ModelsReport
     */
    'createdBy'?: ModelsUser;
    /**
     * 
     * @type {number}
     * @memberof ModelsReport
     */
    'createdByUserID'?: number;
    /**
     * 
     * @type {ModelsCustomer}
     * @memberof ModelsReport
     */
    'customer'?: ModelsCustomer;
    /**
     * 
     * @type {number}
     * @memberof ModelsReport
     */
    'customerID'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsReport
     */
    'date'?: string;
    /**
     * 
     * @type {GormDeletedAt}
     * @memberof ModelsReport
     */
    'deletedAt'?: GormDeletedAt;
    /**
     * 
     * @type {string}
     * @memberof ModelsReport
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsReport
     */
    'duration'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsReport
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsReport
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsReport
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface ModelsReportRequest
 */
export interface ModelsReportRequest {
    /**
     * 
     * @type {number}
     * @memberof ModelsReportRequest
     */
    'createdByUserID'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsReportRequest
     */
    'customerID'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsReportRequest
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsReportRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsReportRequest
     */
    'duration'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsReportRequest
     */
    'title'?: string;
}
/**
 * 
 * @export
 * @interface ModelsReportResponse
 */
export interface ModelsReportResponse {
    /**
     * 
     * @type {boolean}
     * @memberof ModelsReportResponse
     */
    'archived'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ModelsReportResponse
     */
    'archivedByCustomer'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsReportResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {ModelsUser}
     * @memberof ModelsReportResponse
     */
    'createdBy'?: ModelsUser;
    /**
     * 
     * @type {number}
     * @memberof ModelsReportResponse
     */
    'createdByUserID'?: number;
    /**
     * 
     * @type {ModelsCustomer}
     * @memberof ModelsReportResponse
     */
    'customer'?: ModelsCustomer;
    /**
     * 
     * @type {number}
     * @memberof ModelsReportResponse
     */
    'customerID'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsReportResponse
     */
    'date'?: string;
    /**
     * 
     * @type {GormDeletedAt}
     * @memberof ModelsReportResponse
     */
    'deletedAt'?: GormDeletedAt;
    /**
     * 
     * @type {string}
     * @memberof ModelsReportResponse
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsReportResponse
     */
    'duration'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsReportResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsReportResponse
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsReportResponse
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface ModelsTimeTracking
 */
export interface ModelsTimeTracking {
    /**
     * 
     * @type {string}
     * @memberof ModelsTimeTracking
     */
    'createdAt'?: string;
    /**
     * 
     * @type {ModelsUser}
     * @memberof ModelsTimeTracking
     */
    'createdBy'?: ModelsUser;
    /**
     * 
     * @type {number}
     * @memberof ModelsTimeTracking
     */
    'createdByUserID'?: number;
    /**
     * 
     * @type {GormDeletedAt}
     * @memberof ModelsTimeTracking
     */
    'deletedAt'?: GormDeletedAt;
    /**
     * 
     * @type {string}
     * @memberof ModelsTimeTracking
     */
    'event'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsTimeTracking
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsTimeTracking
     */
    'timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsTimeTracking
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface ModelsTimeTrackingRequest
 */
export interface ModelsTimeTrackingRequest {
    /**
     * 
     * @type {number}
     * @memberof ModelsTimeTrackingRequest
     */
    'createdByUserID'?: number;
}
/**
 * 
 * @export
 * @interface ModelsTimeTrackingResponse
 */
export interface ModelsTimeTrackingResponse {
    /**
     * 
     * @type {string}
     * @memberof ModelsTimeTrackingResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {ModelsUser}
     * @memberof ModelsTimeTrackingResponse
     */
    'createdBy'?: ModelsUser;
    /**
     * 
     * @type {number}
     * @memberof ModelsTimeTrackingResponse
     */
    'createdByUserID'?: number;
    /**
     * 
     * @type {GormDeletedAt}
     * @memberof ModelsTimeTrackingResponse
     */
    'deletedAt'?: GormDeletedAt;
    /**
     * 
     * @type {string}
     * @memberof ModelsTimeTrackingResponse
     */
    'event'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsTimeTrackingResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsTimeTrackingResponse
     */
    'timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsTimeTrackingResponse
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface ModelsUser
 */
export interface ModelsUser {
    /**
     * 
     * @type {boolean}
     * @memberof ModelsUser
     */
    'archived'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'createdAt'?: string;
    /**
     * 
     * @type {GormDeletedAt}
     * @memberof ModelsUser
     */
    'deletedAt'?: GormDeletedAt;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'iamUserId'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsUser
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'loginName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface ModelsUserRequest
 */
export interface ModelsUserRequest {
    /**
     * 
     * @type {boolean}
     * @memberof ModelsUserRequest
     */
    'archived'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserRequest
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserRequest
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserRequest
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserRequest
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface ModelsUserResponse
 */
export interface ModelsUserResponse {
    /**
     * 
     * @type {boolean}
     * @memberof ModelsUserResponse
     */
    'archived'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {GormDeletedAt}
     * @memberof ModelsUserResponse
     */
    'deletedAt'?: GormDeletedAt;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserResponse
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserResponse
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserResponse
     */
    'iamUserId'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsUserResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserResponse
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserResponse
     */
    'loginName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserResponse
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserResponse
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserResponse
     */
    'username'?: string;
}

/**
 * CustomerApi - axios parameter creator
 * @export
 */
export const CustomerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Change Archiving Customer
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerArchiveIdPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerArchiveIdPost', 'id', id)
            const localVarPath = `/customer/archive/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return all customers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a customer
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerIdDelete', 'id', id)
            const localVarPath = `/customer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return specific customer
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerIdGet', 'id', id)
            const localVarPath = `/customer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit an existing customer
         * @param {number} id Id
         * @param {ModelsCustomerRequest} customerRequest CustomerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerIdPut: async (id: number, customerRequest: ModelsCustomerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('customerIdPut', 'id', id)
            // verify required parameter 'customerRequest' is not null or undefined
            assertParamExists('customerIdPut', 'customerRequest', customerRequest)
            const localVarPath = `/customer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new customer
         * @param {ModelsCustomerRequest} customerRequest CustomerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerPost: async (customerRequest: ModelsCustomerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerRequest' is not null or undefined
            assertParamExists('customerPost', 'customerRequest', customerRequest)
            const localVarPath = `/customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerApi - functional programming interface
 * @export
 */
export const CustomerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerApiAxiosParamCreator(configuration)
    return {
        /**
         * Change Archiving Customer
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerArchiveIdPost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerArchiveIdPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return all customers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsCustomerResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a customer
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsDeleteMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return specific customer
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Edit an existing customer
         * @param {number} id Id
         * @param {ModelsCustomerRequest} customerRequest CustomerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerIdPut(id: number, customerRequest: ModelsCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerIdPut(id, customerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new customer
         * @param {ModelsCustomerRequest} customerRequest CustomerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerPost(customerRequest: ModelsCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerPost(customerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerApi - factory interface
 * @export
 */
export const CustomerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerApiFp(configuration)
    return {
        /**
         * Change Archiving Customer
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerArchiveIdPost(id: number, options?: any): AxiosPromise<ModelsCustomerResponse> {
            return localVarFp.customerArchiveIdPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return all customers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerGet(options?: any): AxiosPromise<Array<ModelsCustomerResponse>> {
            return localVarFp.customerGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a customer
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerIdDelete(id: number, options?: any): AxiosPromise<ModelsDeleteMessage> {
            return localVarFp.customerIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return specific customer
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerIdGet(id: number, options?: any): AxiosPromise<ModelsCustomerResponse> {
            return localVarFp.customerIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit an existing customer
         * @param {number} id Id
         * @param {ModelsCustomerRequest} customerRequest CustomerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerIdPut(id: number, customerRequest: ModelsCustomerRequest, options?: any): AxiosPromise<ModelsCustomerResponse> {
            return localVarFp.customerIdPut(id, customerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new customer
         * @param {ModelsCustomerRequest} customerRequest CustomerRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerPost(customerRequest: ModelsCustomerRequest, options?: any): AxiosPromise<ModelsCustomerResponse> {
            return localVarFp.customerPost(customerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerApi - object-oriented interface
 * @export
 * @class CustomerApi
 * @extends {BaseAPI}
 */
export class CustomerApi extends BaseAPI {
    /**
     * Change Archiving Customer
     * @param {number} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerArchiveIdPost(id: number, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerArchiveIdPost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return all customers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerGet(options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a customer
     * @param {number} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerIdDelete(id: number, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return specific customer
     * @param {number} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerIdGet(id: number, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit an existing customer
     * @param {number} id Id
     * @param {ModelsCustomerRequest} customerRequest CustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerIdPut(id: number, customerRequest: ModelsCustomerRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerIdPut(id, customerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new customer
     * @param {ModelsCustomerRequest} customerRequest CustomerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public customerPost(customerRequest: ModelsCustomerRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).customerPost(customerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportApi - axios parameter creator
 * @export
 */
export const ReportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Change Archiving Report
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportArchiveIdPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reportArchiveIdPost', 'id', id)
            const localVarPath = `/report/archive/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return all reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Report
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reportIdDelete', 'id', id)
            const localVarPath = `/report/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return specific report
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reportIdGet', 'id', id)
            const localVarPath = `/report/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit an existing report
         * @param {number} id Id
         * @param {ModelsReportRequest} reportRequest ReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportIdPut: async (id: number, reportRequest: ModelsReportRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reportIdPut', 'id', id)
            // verify required parameter 'reportRequest' is not null or undefined
            assertParamExists('reportIdPut', 'reportRequest', reportRequest)
            const localVarPath = `/report/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Report
         * @param {ModelsReportRequest} reportRequest ReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportPost: async (reportRequest: ModelsReportRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportRequest' is not null or undefined
            assertParamExists('reportPost', 'reportRequest', reportRequest)
            const localVarPath = `/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportApi - functional programming interface
 * @export
 */
export const ReportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportApiAxiosParamCreator(configuration)
    return {
        /**
         * Change Archiving Report
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportArchiveIdPost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportArchiveIdPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return all reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsReportResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Report
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsDeleteMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return specific report
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Edit an existing report
         * @param {number} id Id
         * @param {ModelsReportRequest} reportRequest ReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportIdPut(id: number, reportRequest: ModelsReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportIdPut(id, reportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a Report
         * @param {ModelsReportRequest} reportRequest ReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportPost(reportRequest: ModelsReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportPost(reportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportApi - factory interface
 * @export
 */
export const ReportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportApiFp(configuration)
    return {
        /**
         * Change Archiving Report
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportArchiveIdPost(id: number, options?: any): AxiosPromise<ModelsReport> {
            return localVarFp.reportArchiveIdPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return all reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportGet(options?: any): AxiosPromise<Array<ModelsReportResponse>> {
            return localVarFp.reportGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Report
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportIdDelete(id: number, options?: any): AxiosPromise<ModelsDeleteMessage> {
            return localVarFp.reportIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return specific report
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportIdGet(id: number, options?: any): AxiosPromise<ModelsReportResponse> {
            return localVarFp.reportIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit an existing report
         * @param {number} id Id
         * @param {ModelsReportRequest} reportRequest ReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportIdPut(id: number, reportRequest: ModelsReportRequest, options?: any): AxiosPromise<ModelsReportResponse> {
            return localVarFp.reportIdPut(id, reportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Report
         * @param {ModelsReportRequest} reportRequest ReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportPost(reportRequest: ModelsReportRequest, options?: any): AxiosPromise<ModelsReportResponse> {
            return localVarFp.reportPost(reportRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportApi - object-oriented interface
 * @export
 * @class ReportApi
 * @extends {BaseAPI}
 */
export class ReportApi extends BaseAPI {
    /**
     * Change Archiving Report
     * @param {number} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public reportArchiveIdPost(id: number, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).reportArchiveIdPost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return all reports
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public reportGet(options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).reportGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Report
     * @param {number} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public reportIdDelete(id: number, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).reportIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return specific report
     * @param {number} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public reportIdGet(id: number, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).reportIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit an existing report
     * @param {number} id Id
     * @param {ModelsReportRequest} reportRequest ReportRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public reportIdPut(id: number, reportRequest: ModelsReportRequest, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).reportIdPut(id, reportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a Report
     * @param {ModelsReportRequest} reportRequest ReportRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public reportPost(reportRequest: ModelsReportRequest, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).reportPost(reportRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TimeApi - axios parameter creator
 * @export
 */
export const TimeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return all timestamps (you can also set a filter)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/time`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a timestamp
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('timeIdDelete', 'id', id)
            const localVarPath = `/time/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific timestamp
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('timeIdGet', 'id', id)
            const localVarPath = `/time/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit a timestamp
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeIdPut: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('timeIdPut', 'id', id)
            const localVarPath = `/time/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The user logs in
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeLoginPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/time/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The user logs out
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeLogoutPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/time/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all own timestamps
         * @param {ModelsTimeTrackingRequest} timeTrackingRequest TimeTrackingRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeMyGet: async (timeTrackingRequest: ModelsTimeTrackingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeTrackingRequest' is not null or undefined
            assertParamExists('timeMyGet', 'timeTrackingRequest', timeTrackingRequest)
            const localVarPath = `/time/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(timeTrackingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimeApi - functional programming interface
 * @export
 */
export const TimeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimeApiAxiosParamCreator(configuration)
    return {
        /**
         * Return all timestamps (you can also set a filter)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsTimeTrackingResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a timestamp
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timeIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsDeleteMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timeIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a specific timestamp
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timeIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsTimeTrackingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timeIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Edit a timestamp
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timeIdPut(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsTimeTrackingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timeIdPut(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The user logs in
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timeLoginPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsTimeTracking>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timeLoginPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The user logs out
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timeLogoutPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsTimeTracking>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timeLogoutPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all own timestamps
         * @param {ModelsTimeTrackingRequest} timeTrackingRequest TimeTrackingRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timeMyGet(timeTrackingRequest: ModelsTimeTrackingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsTimeTrackingResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timeMyGet(timeTrackingRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimeApi - factory interface
 * @export
 */
export const TimeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimeApiFp(configuration)
    return {
        /**
         * Return all timestamps (you can also set a filter)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeGet(options?: any): AxiosPromise<Array<ModelsTimeTrackingResponse>> {
            return localVarFp.timeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a timestamp
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeIdDelete(id: number, options?: any): AxiosPromise<ModelsDeleteMessage> {
            return localVarFp.timeIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific timestamp
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeIdGet(id: number, options?: any): AxiosPromise<ModelsTimeTrackingResponse> {
            return localVarFp.timeIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit a timestamp
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeIdPut(id: number, options?: any): AxiosPromise<ModelsTimeTrackingResponse> {
            return localVarFp.timeIdPut(id, options).then((request) => request(axios, basePath));
        },
        /**
         * The user logs in
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeLoginPost(options?: any): AxiosPromise<ModelsTimeTracking> {
            return localVarFp.timeLoginPost(options).then((request) => request(axios, basePath));
        },
        /**
         * The user logs out
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeLogoutPost(options?: any): AxiosPromise<ModelsTimeTracking> {
            return localVarFp.timeLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all own timestamps
         * @param {ModelsTimeTrackingRequest} timeTrackingRequest TimeTrackingRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeMyGet(timeTrackingRequest: ModelsTimeTrackingRequest, options?: any): AxiosPromise<Array<ModelsTimeTrackingResponse>> {
            return localVarFp.timeMyGet(timeTrackingRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TimeApi - object-oriented interface
 * @export
 * @class TimeApi
 * @extends {BaseAPI}
 */
export class TimeApi extends BaseAPI {
    /**
     * Return all timestamps (you can also set a filter)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeApi
     */
    public timeGet(options?: AxiosRequestConfig) {
        return TimeApiFp(this.configuration).timeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a timestamp
     * @param {number} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeApi
     */
    public timeIdDelete(id: number, options?: AxiosRequestConfig) {
        return TimeApiFp(this.configuration).timeIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific timestamp
     * @param {number} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeApi
     */
    public timeIdGet(id: number, options?: AxiosRequestConfig) {
        return TimeApiFp(this.configuration).timeIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit a timestamp
     * @param {number} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeApi
     */
    public timeIdPut(id: number, options?: AxiosRequestConfig) {
        return TimeApiFp(this.configuration).timeIdPut(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The user logs in
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeApi
     */
    public timeLoginPost(options?: AxiosRequestConfig) {
        return TimeApiFp(this.configuration).timeLoginPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The user logs out
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeApi
     */
    public timeLogoutPost(options?: AxiosRequestConfig) {
        return TimeApiFp(this.configuration).timeLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all own timestamps
     * @param {ModelsTimeTrackingRequest} timeTrackingRequest TimeTrackingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeApi
     */
    public timeMyGet(timeTrackingRequest: ModelsTimeTrackingRequest, options?: AxiosRequestConfig) {
        return TimeApiFp(this.configuration).timeMyGet(timeTrackingRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return specific User
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userArchiveIdPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userArchiveIdPost', 'id', id)
            const localVarPath = `/user/archive/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a user
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userIdDelete', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return specific user
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userIdGet', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit an existing user
         * @param {number} id Id
         * @param {ModelsUserRequest} userRequest UserRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userIdPut: async (id: number, userRequest: ModelsUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userIdPut', 'id', id)
            // verify required parameter 'userRequest' is not null or undefined
            assertParamExists('userIdPut', 'userRequest', userRequest)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new user
         * @param {ModelsUserRequest} userRequest UserRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPost: async (userRequest: ModelsUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRequest' is not null or undefined
            assertParamExists('userPost', 'userRequest', userRequest)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Return specific User
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userArchiveIdPost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userArchiveIdPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsUserResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a user
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsDeleteMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return specific user
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Edit an existing user
         * @param {number} id Id
         * @param {ModelsUserRequest} userRequest UserRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userIdPut(id: number, userRequest: ModelsUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userIdPut(id, userRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new user
         * @param {ModelsUserRequest} userRequest UserRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userPost(userRequest: ModelsUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userPost(userRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Return specific User
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userArchiveIdPost(id: number, options?: any): AxiosPromise<ModelsUserResponse> {
            return localVarFp.userArchiveIdPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet(options?: any): AxiosPromise<Array<ModelsUserResponse>> {
            return localVarFp.userGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a user
         * @param {number} id Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userIdDelete(id: number, options?: any): AxiosPromise<ModelsDeleteMessage> {
            return localVarFp.userIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return specific user
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userIdGet(id: number, options?: any): AxiosPromise<ModelsUserResponse> {
            return localVarFp.userIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit an existing user
         * @param {number} id Id
         * @param {ModelsUserRequest} userRequest UserRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userIdPut(id: number, userRequest: ModelsUserRequest, options?: any): AxiosPromise<ModelsUserResponse> {
            return localVarFp.userIdPut(id, userRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user
         * @param {ModelsUserRequest} userRequest UserRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPost(userRequest: ModelsUserRequest, options?: any): AxiosPromise<ModelsUserResponse> {
            return localVarFp.userPost(userRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Return specific User
     * @param {number} id ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userArchiveIdPost(id: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userArchiveIdPost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userGet(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a user
     * @param {number} id Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userIdDelete(id: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return specific user
     * @param {number} id ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userIdGet(id: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit an existing user
     * @param {number} id Id
     * @param {ModelsUserRequest} userRequest UserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userIdPut(id: number, userRequest: ModelsUserRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userIdPut(id, userRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new user
     * @param {ModelsUserRequest} userRequest UserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userPost(userRequest: ModelsUserRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userPost(userRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


